auto fonction_auto(auto a, auto b, auto c){
    return {a};
}

int test_auto() {
    auto gg = fonction_auto({5}, 3, 2);
    print(gg);
    auto ff = fonction_auto(5, 3, 2);
    print(ff);
    return 0;
}

int testTab() {
    auto a = {{18}, {69}};
        print(a);
    a[1] = {8, 58, 75, 89};
        print(a);
    auto g = a[5];
        print(a);
    auto h = g[5];
        print(h);
    auto ee = a[4];
        print(ee);
    a[3][8] = 42;
    auto oui = a[3][8];
        print(oui);
        print(a);
    return 0;
}

bool hanoi_swap(int start, int middle, int end, int rings) {
    if (rings == 0)
        return true;
    auto pass1 = hanoi_swap(start, end, middle, rings - 1);
    int[] printable = {start, end};
    print(printable);
    auto pass2 = hanoi_swap(middle, start, end, rings - 1);
    return pass1 && pass2;
}

int hanoi(int number) {
    auto pass = hanoi_swap(0, 1, 2, number);
    if (pass)
        return 1;
    return 0;
}

int sum(int n) {
    if (n == 0) return 0;
    return (n + sum(n - 1));
}

int allBinaries(int[] tab, int i, int n) {
    if (i==n) {
        print(tab);
        return 0;
    }
    tab[i] = 0;
    auto b = allBinaries(tab, i + 1, n);
    tab[i] = 1;
    b = allBinaries(tab, i + 1, n);
    return 0;
}

int testBinaries(int n) {
    int[] tab = {};
    auto test = allBinaries(tab, 0, n);
    return 0;
}

int main() {
    int line = 11111111;
    auto test = test_auto();
    print(line);
    test = testTab();
    print(line);
    test = hanoi(3);
    print(line);
    auto sum = sum(100);
    print(sum);
    print(line);
    test = testBinaries(4);
    return 0;
}